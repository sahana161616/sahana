#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ITEMS 100
#define NAME_LENGTH 50

typedef struct {
    int id;
    char name[NAME_LENGTH];
    int quantity;
    float price;
} Item;

Item inventory[MAX_ITEMS];
int itemCount = 0;

// Function prototypes
void addItem();
void deleteItem();
void viewItems();
void updateItem();
int findItemById(int id);
void menu();

// Main function
int main() {
    int choice;
    do {
        menu();
        printf("Enter your choice (1-5): ");
        scanf("%d", &choice);
        getchar(); // Clear newline from buffer

        switch (choice) {
            case 1:
                addItem();
                break;
            case 2:
                deleteItem();
                break;
            case 3:
                viewItems();
                break;
            case 4:
                updateItem();
                break;
            case 5:
                printf("Exiting program. Goodbye!\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 5);

    return 0;
}

// Display menu
void menu() {
    printf("\n--- Inventory Management System ---\n");
    printf("1. Add Item\n");
    printf("2. Delete Item\n");
    printf("3. View Items\n");
    printf("4. Update Item\n");
    printf("5. Exit\n");
}

// Add a new item to the inventory
void addItem() {
    if (itemCount >= MAX_ITEMS) {
        printf("Inventory is full. Cannot add more items.\n");
        return;
    }

    Item newItem;
    newItem.id = itemCount + 1;

    printf("Enter item name: ");
    fgets(newItem.name, NAME_LENGTH, stdin);
    newItem.name[strcspn(newItem.name, "\n")] = '\0'; // Remove newline character

    printf("Enter item quantity: ");
    scanf("%d", &newItem.quantity);

    printf("Enter item price: ");
    scanf("%f", &newItem.price);

    inventory[itemCount] = newItem;
    itemCount++;

    printf("Item added successfully!\n");
}

// Delete an item from the inventory
void deleteItem() {
    int id;
    printf("Enter the ID of the item to delete: ");
    scanf("%d", &id);

    int index = findItemById(id);
    if (index == -1) {
        printf("Item with ID %d not found.\n", id);
        return;
    }

    for (int i = index; i < itemCount - 1; i++) {
        inventory[i] = inventory[i + 1];
    }
    itemCount--;

    printf("Item deleted successfully.\n");
}

// View all items in the inventory
void viewItems() {
    if (itemCount == 0) {
        printf("No items in the inventory.\n");
        return;
    }

    printf("\n--- Inventory List ---\n");
    printf("%-5s %-20s %-10s %-10s\n", "ID", "Name", "Quantity", "Price");
    printf("-------------------------------------------------\n");

    for (int i = 0; i < itemCount; i++) {
        printf("%-5d %-20s %-10d $%-9.2f\n",
               inventory[i].id, inventory[i].name, inventory[i].quantity, inventory[i].price);
    }
}

// Update an item's details
void updateItem() {
    int id;
    printf("Enter the ID of the item to update: ");
    scanf("%d", &id);
    getchar(); // Clear newline from buffer

    int index = findItemById(id);
    if (index == -1) {
        printf("Item with ID %d not found.\n", id);
        return;
    }

    printf("Enter new name (leave blank to keep current): ");
    char newName[NAME_LENGTH];
    fgets(newName, NAME_LENGTH, stdin);
    newName[strcspn(newName, "\n")] = '\0'; // Remove newline character

    if (strlen(newName) > 0) {
        strcpy(inventory[index].name, newName);
    }

    printf("Enter new quantity (negative to keep current): ");
    int newQuantity;
    scanf("%d", &newQuantity);

    if (newQuantity >= 0) {
        inventory[index].quantity = newQuantity;
    }

    printf("Enter new price (negative to keep current): ");
    float newPrice;
    scanf("%f", &newPrice);

    if (newPrice >= 0) {
        inventory[index].price = newPrice;
    }

    printf("Item updated successfully.\n");
}

// Find an item by its ID
int findItemById(int id) {
    for (int i = 0; i < itemCount; i++) {
        if (inventory[i].id == id) {
            return i;
        }
    }
    return -1;
}
