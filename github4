#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

// Define a structure to represent a graph node
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning of a linked list
void insertAtBeginning(Node** head, int data) {
    Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

// Function to insert a node at the end of a linked list
void insertAtEnd(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to delete a node from the beginning of a linked list
void deleteAtBeginning(Node** head) {
    if (*head == NULL) {
        return;
    }
    Node* temp = *head;
    *head = (*head)->next;
    free(temp);
}

// Function to delete a node from the end of a linked list
void deleteAtEnd(Node** head) {
    if (*head == NULL) {
        return;
    }
    if ((*head)->next == NULL) {
        free(*head);
        *head = NULL;
        return;
    }
    Node* temp = *head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;
}

// Function to search for a node in a linked list
Node* searchNode(Node* head, int data) {
    Node* temp = head;
    while (temp != NULL) {
        if (temp->data == data) {
            return temp;
        }
        temp = temp->next;
    }
    return NULL;
}

// Function to print the elements of a linked list
void printList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Function to reverse a linked list
Node* reverseList(Node* head) {
    Node* prev = NULL;
    Node* current = head;
    Node* next;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}

// Function to merge two sorted linked lists
Node* mergeSortedLists(Node* head1, Node* head2) {
    if (head1 == NULL) {
        return head2;
    }
    if (head2 == NULL) {
        return head1;
    }
    Node* mergedHead = NULL;
    if (head1->data <= head2->data) {
        mergedHead = head1;
        mergedHead->next = mergeSortedLists(head1->next, head2);
    } else {
        mergedHead = head2;
        mergedHead->next = mergeSortedLists(head1, head2->next);
    }
    return mergedHead;
}

// Function to implement stack using linked list
typedef struct Stack {
    Node* top;
} Stack;

void stackPush(Stack* stack, int data) {
    insertAtBeginning(&stack->top, data);
}

int stackPop(Stack* stack) {
    if (stack->top == NULL) {
        return -1; // Stack underflow
    }
    int data = stack->top->data;
    deleteAtBeginning(&stack->top);
    return data;
}

int stackTop(Stack* stack) {
    if (stack->top == NULL) {
        return -1; // Stack underflow
    }
    return stack->top->data;
}

int isEmpty(Stack* stack) {
    return (stack->top == NULL);
}

// Function to implement queue using linked list
typedef struct Queue {
    Node* front;
    Node* rear;
} Queue;

void enqueue(Queue* queue, int data) {
    insertAtEnd(&queue->rear, data);
    if (queue->front == NULL) {
        queue->front = queue->rear;
    }
}

int dequeue(Queue* queue) {
    if (queue->front == NULL) {
        return -1; // Queue underflow
    }
    int data = queue->front->data;
    deleteAtBeginning(&queue->front);
    if (queue->front == NULL) {
        queue->rear = NULL;
    }
    return data;
}

int front(Queue* queue) {
    if (queue->front == NULL) {
        return -1; // Queue underflow
    }
    return queue->front->data;
}

int isEmptyQueue(Queue* queue) {
    return (queue->front == NULL);
}

// Function to implement binary search tree
typedef struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

TreeNode* insert(TreeNode* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}

TreeNode* search(TreeNode* root, int data) {
    if (root == NULL || root->data == data) {
        return root;
    }
    if (data < root->data) {
        return search(root->left, data);
    }
    return search(root->right, data);
}

// ... (Implement other BST operations like inorder, preorder, postorder traversal, deletion)

int main() {
    // Example usage of linked list
    Node* head = NULL;
    insertAtBeginning(&head, 3);
    insertAtEnd(&head, 2);
    insertAtBeginning(&head, 1);
    printList(head); // Output: 1 3 2
    deleteAtBeginning(&head);
    printList(head); // Output: 3 2
    deleteAtEnd(&head);
    printList(head); // Output: 3

    // Example usage of stack
    Stack stack;
    stack.top = NULL;
    stackPush(&stack, 1);
    stackPush(&stack, 2);
    printf("Stack top: %d\n", stackTop(&stack)); // Output: 2
    printf("Popped element: %d\n", stackPop(&stack)); // Output: 2

    // Example usage of queue
    Queue queue;
    queue.front = queue.rear = NULL;
    enqueue(&queue, 1);
    enqueue(&queue, 2);
    printf("Queue front: %d\n", front(&queue)); // Output: 1
    printf("Dequeued element: %d\n", dequeue(&queue)); // Output: 1

    // Example usage of binary search tree
    TreeNode* root = NULL;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 70);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 60);
    root = insert(root, 80);

    if (search(root, 40) != NULL) {
        printf("40 found in BST\n");
    }

    return 0;
}
